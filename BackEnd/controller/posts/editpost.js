const PostModel = require("../../model/Post.Model");
const UserModel = require("../../model/User.Model");
const { getIO, getOnlineUsers } = require("../../config/socker");

exports.editPost = async (req, res) => {
  try {
    const { postId, newContent } = req.body;
    const userId = req.user.id;

    if (!postId || !newContent || !userId) {
      return res.status(400).json({ error: "Thi·∫øu th√¥ng tin" });
    }

    // t√¨m post
    const post = await PostModel.findById(postId);
    if (!post)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt" });

    // ki·ªÉm tra b·∫°n c√≥ ph·∫£i ng∆∞·ªùi t·∫°o post kh√¥ng
    if (post.author.toString() !== userId) {
      return res
        .status(403)
        .json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a b√†i vi·∫øt n√†y" });
    }

    // c·∫≠p nh·∫≠t n·ªôi dung
    post.content = newContent;
    post.isEdited = true;
    post.editedAt = new Date();
    await post.save();

    // üî• G·ª≠i socket cho b·∫°n b√® v√† ch√≠nh ng∆∞·ªùi t·∫°o
    const postAuthor = await UserModel.findById(userId).select("friends");
    const allowedUsers = postAuthor.friends.map((f) => String(f));
    allowedUsers.push(String(userId));

    const io = getIO();
    const onlineUsers = getOnlineUsers();

    Object.entries(onlineUsers).forEach(([uid, socketId]) => {
      if (allowedUsers.includes(uid)) {
        io.to(socketId).emit("postEdited", {
          post,
        });
      }
    });
    res.json({ success: true, message: "C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng", post });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server" });
  }
};
